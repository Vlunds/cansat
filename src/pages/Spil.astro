<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Space Shooter Game</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #111;
            color: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            overflow: hidden;
            flex-direction: column;
        }

        #game-container {
            text-align: center;
            position: relative;
        }

        h1 {
            color: #ff6600;
            margin-bottom: 20px;
        }

        #score {
            font-size: 1.5em;
            margin-bottom: 20px;
        }

        canvas {
            border: 2px solid #fff;
            background-color: #000;
            display: block;
            margin: 0 auto;
        }

        #startButton {
            font-size: 1.2em;
            padding: 15px 30px;
            margin-top: 20px;
            cursor: pointer;
            background-color: #ff6600;
            border: none;
            color: #fff;
            border-radius: 10px;
        }

        #startButton:hover {
            background-color: #ff8500;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <h1>Space Shooter</h1>
        <p id="score">Score: 0</p>
        <canvas id="gameCanvas"></canvas>
        <button id="startButton">Start Game</button>
    </div>
    <script>
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");
        canvas.width = 800;
        canvas.height = 600;

        const startButton = document.getElementById("startButton");
        const scoreDisplay = document.getElementById("score");

        let score = 0;
        let player;
        let bullets = [];
        let enemies = [];
        let gameInterval;
        let gameActive = false;
        let leftKey = false, rightKey = false;

        // Player class
        class Player {
            constructor() {
                this.width = 50;
                this.height = 50;
                this.x = canvas.width / 2 - this.width / 2;
                this.y = canvas.height - this.height - 10;
                this.speed = 0.5;
                this.velocity = 0;
                this.maxSpeed = 7; // Increased max speed
                this.acceleration = 0.5; // Faster acceleration
                this.deceleration = 0.2; // Faster deceleration
                this.color = "#0ff";
            }

            draw() {
                ctx.fillStyle = this.color;
                ctx.fillRect(this.x, this.y, this.width, this.height);
            }

            move() {
                // Accelerate if a key is pressed
                if (leftKey && this.velocity > -this.maxSpeed) {
                    this.velocity -= this.acceleration;
                } else if (rightKey && this.velocity < this.maxSpeed) {
                    this.velocity += this.acceleration;
                } else {
                    // Decelerate if no key is pressed
                    if (this.velocity > 0) this.velocity -= this.deceleration;
                    else if (this.velocity < 0) this.velocity += this.deceleration;
                }

                this.x += this.velocity;

                // Ensure the player stays within the canvas boundaries
                if (this.x < 0) this.x = 0;
                if (this.x + this.width > canvas.width) this.x = canvas.width - this.width;
            }
        }

        // Bullet class
        class Bullet {
            constructor(x, y) {
                this.width = 5;
                this.height = 10;
                this.x = x;
                this.y = y;
                this.speed = 7;
                this.color = "#ff0";
            }

            draw() {
                ctx.fillStyle = this.color;
                ctx.fillRect(this.x, this.y, this.width, this.height);
            }

            update() {
                this.y -= this.speed;
            }
        }

        // Enemy class (smaller enemies)
        class Enemy {
            constructor(x, y, speed) {
                this.width = 30;  // Smaller enemy
                this.height = 30;
                this.x = x;
                this.y = y;
                this.speed = speed;
                this.color = "#f00";
            }

            draw() {
                ctx.fillStyle = this.color;
                ctx.fillRect(this.x, this.y, this.width, this.height);
            }

            update() {
                this.y += this.speed;
            }
        }

        // Spawn enemies at random locations
        function spawnEnemy() {
            const x = Math.random() * (canvas.width - 40);
            const speed = 2 + Math.random() * 3; // Slightly faster enemies
            enemies.push(new Enemy(x, 0, speed));
        }

        // Update the game state (render player, bullets, and enemies)
        function updateGame() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            player.draw();
            player.move();

            bullets.forEach((bullet, bulletIndex) => {
                bullet.update();
                bullet.draw();

                // Remove bullet when it goes out of bounds
                if (bullet.y + bullet.height < 0) {
                    bullets.splice(bulletIndex, 1);
                }
            });

            enemies.forEach((enemy, enemyIndex) => {
                enemy.update();
                enemy.draw();

                // Bullet collision detection with enemies
                bullets.forEach((bullet, bulletIndex) => {
                    if (
                        bullet.x < enemy.x + enemy.width &&
                        bullet.x + bullet.width > enemy.x &&
                        bullet.y < enemy.y + enemy.height &&
                        bullet.height + bullet.y > enemy.y
                    ) {
                        setScore(score + 1);
                        enemies.splice(enemyIndex, 1);
                        bullets.splice(bulletIndex, 1);
                    }
                });

                // Remove enemy if it reaches the bottom of the screen
                if (enemy.y > canvas.height) {
                    enemies.splice(enemyIndex, 1); 
                }

                // Check if player collides with an enemy
                if (
                    player.x < enemy.x + enemy.width &&
                    player.x + player.width > enemy.x &&
                    player.y < enemy.y + enemy.height &&
                    player.height + player.y > enemy.y
                ) {
                    gameOver();
                }
            });
        }

        // Update score display
        function setScore(newScore) {
            score = newScore;
            scoreDisplay.textContent = `Score: ${score}`;
        }

        // Handle game over
        function gameOver() {
            clearInterval(gameInterval);
            gameActive = false;
            alert("Game Over! Your score: " + score);
            startButton.style.display = "block";
        }

        // Start the game
        function startGame() {
            score = 0;
            setScore(score);
            player = new Player();
            bullets = [];
            enemies = [];
            startButton.style.display = "none";
            gameActive = true;

            gameInterval = setInterval(() => {
                updateGame();
                if (Math.random() < 0.02) { // Fewer enemies spawning
                    spawnEnemy();
                }
            }, 1000 / 60);
        }

        // Event listener for player movement and shooting
        window.addEventListener("keydown", (e) => {
            if (!gameActive) return;

            if (e.key === "ArrowLeft") {
                leftKey = true;
            } else if (e.key === "ArrowRight") {
                rightKey = true;
            } else if (e.key === " ") {
                bullets.push(new Bullet(player.x + player.width / 2 - 2.5, player.y));
            }
        });

        window.addEventListener("keyup", (e) => {
            if (e.key === "ArrowLeft") {
                leftKey = false;
            } else if (e.key === "ArrowRight") {
                rightKey = false;
            }
        });

        // Start game when button is clicked
        startButton.addEventListener("click", startGame);
    </script>
</body>
</html>
