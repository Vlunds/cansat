---
import '../css/generalstyle.css';
import { supabase } from "../lib/supabase";
const { data, error } = await supabase.from("measurements").select();
console.log(data);
console.log(error);
const Temperatur = Astro.url.searchParams.get("Temperatur");
console.log(`Temperatur received: ${Temperatur}`);
const Tryk = Astro.url.searchParams.get("Tryk");
console.log(`Tryk received: ${Tryk}`);
if (Tryk||Temperatur) {
    const { data, error } = await supabase
        .from("measurements")
        .insert({ Tryk: parseInt(Tryk), Temperatur: parseInt(Temperatur) });
    if (error) console.log(`Insert error: ${error}`);
}
---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>Micropy</title>
    </head>
    <body>
        <div class="topnav">
            <a class="small" href="/"><img src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fwww.iconsdb.com%2Ficons%2Fdownload%2Fwhite%2Farrow-121-512.png&f=1&nofb=1&ipt=8d9dd49a1cb8b921ce939576cd0d6c0b69f42f4bad36f88b163f3f3133dc86ab&ipo=images" height="51" width="51"/></a>
            <a class="active large" href="/data">Måling</a>
            <a class="large" href="/log">Log</a>
        </div>
        <div class="sidenav">
            <a href="/data">Lige nu</a>
            <a class="active1" href="/termometer">Termometer</a>
            <a href="/barometer">Barometer</a>
        </div>
        <div class="main">
            <p id="titel">Termometer</p>
            
            <div class="termometer-container">
                <div class="termometer">
                    <div class="termometer-level" id="tempLevel"></div>
                </div>
                <p>Temperatur: <span id="tempValue">0</span>°C</p>
            </div>
        </div>
    </body>
</html>

<style>

.termometer-container {
    width: 100%;
    max-width: 400px;
    margin: 0 auto;
    text-align: center;
}

.termometer {
    width: 40px;
    height: 300px;
    background-color: #ddd;
    border-radius: 20px;
    margin: 20px auto;
    position: relative;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
}

.termometer-level {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 0; 
    background-color: rgb(255, 0, 0); 
    border-radius: 20px;
}

#tempValue {
    font-size: 24px;
    color: #fff;
}
</style>

<script>
   // Skift til aktuel microcontroller IP!!!
   const ip = "192.168.4.1";
    const p = document.querySelector("#response");
    async function getData() {
        if (!ip) return;
        console.log(`Forbinder til: ${ip}`);
        let data = "";
        try {
            const res = await fetch(`http://${ip}`);
            data = await res.text();
        } catch (e) {
            console.log(e);
        }
        console.log(`Data modtaget: ${data}`);
        p.innerHTML = data;
    }
    getData();
    
    setInterval(function() {
        location.reload(); // Genindlæs siden
    }, 4000);

     function updateTemperature(temp) {
        const tempLevel = document.getElementById('tempLevel');
        const tempValue = document.getElementById('tempValue');
        
        tempValue.textContent = temp;

        const minTemp = -20;
        const maxTemp = 40;
        const range = maxTemp - minTemp;
        const levelHeight = ((temp - minTemp) / range) * 100;

        tempLevel.style.height = `${levelHeight}%`;
    }

    let currentTemp = 5;
    updateTemperature(currentTemp);
    
</script>
